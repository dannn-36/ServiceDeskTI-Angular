
  <script>
    // Sample data based on database structure
    const sampleUsers = [
      { id: 1, nombre: 'Carlos Mendoza', correo: 'carlos.mendoza@empresa.com', rol: 'Cliente', departamento: 'Ventas', estado: 'activo', ultimo_acceso: '2024-01-15 10:30' },
      { id: 2, nombre: 'Ana L√≥pez', correo: 'ana.lopez@empresa.com', rol: 'Agente', departamento: 'TI', estado: 'activo', ultimo_acceso: '2024-01-15 11:45' },
      { id: 3, nombre: 'Mar√≠a Gonz√°lez', correo: 'maria.gonzalez@empresa.com', rol: 'Cliente', departamento: 'Contabilidad', estado: 'activo', ultimo_acceso: '2024-01-15 09:15' },
      { id: 4, nombre: 'Roberto Silva', correo: 'roberto.silva@empresa.com', rol: 'Supervisor', departamento: 'TI', estado: 'activo', ultimo_acceso: '2024-01-15 08:30' }
    ];

    const sampleTickets = [
      { id: 'TK-1248', titulo: 'Computadora no enciende', usuario: 'Carlos Mendoza', categoria: 'Hardware', estado: 'abierto', prioridad: 'alta', fecha: '2024-01-15 09:30' },
      { id: 'TK-1247', titulo: 'Error en aplicaci√≥n contable', usuario: 'Mar√≠a Gonz√°lez', categoria: 'Software', estado: 'en-progreso', prioridad: 'media', fecha: '2024-01-15 08:45' },
      { id: 'TK-1246', titulo: 'Sin acceso a internet', usuario: 'Roberto Silva', categoria: 'Red', estado: 'pendiente', prioridad: 'alta', fecha: '2024-01-14 16:20' }
    ];

    const sampleAuditLog = [
      { usuario: 'Admin Sistema', accion: 'Inicio de sesi√≥n', detalle: 'Acceso desde IP 192.168.1.100', fecha: '2024-01-15 11:45' },
      { usuario: 'Ana L√≥pez', accion: 'Ticket asignado', detalle: 'TK-1248 asignado a Ana L√≥pez', fecha: '2024-01-15 11:30' },
      { usuario: 'Carlos Mendoza', accion: 'Ticket creado', detalle: 'TK-1248 - Computadora no enciende', fecha: '2024-01-15 09:30' }
    ];

    let currentSection = 'dashboard';

    function showSection(section, element) {
      // Ocultar todas las secciones
      document.querySelectorAll('[id$="-section"]').forEach(el => el.classList.add('hidden'));

      // Mostrar la secci√≥n seleccionada
      const sectionEl = document.getElementById(section + '-section');
      if (sectionEl) sectionEl.classList.remove('hidden');
      else console.warn(`‚ö†Ô∏è No se encontr√≥ la secci√≥n: ${section}-section`);

      // Quitar estado activo de todos los botones de la barra lateral
      document.querySelectorAll('.sidebar-item').forEach(item => item.classList.remove('active'));

      // Marcar el bot√≥n actual como activo
      if (element) element.classList.add('active');

      // Guardar la secci√≥n actual
      currentSection = section;

      // Cargar contenido seg√∫n la secci√≥n
      switch (section) {
        case 'users':
          renderUsers();
          break;
        case 'tickets':
          loadTickets();
          break;
        case 'audit':
          loadAuditLog();
          break;
        case 'reports':
          loadReports();
          break;
        default:
          break;
      }

    }


    function loadUsers() {
      const tbody = document.getElementById('usersTableBody');
      tbody.innerHTML = sampleUsers.map(user => `
                  <tr class="hover:bg-gray-50">
                      <td class="px-6 py-4 whitespace-nowrap">
                          <div class="flex items-center">
                              <div class="w-8 w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center mr-3">
                                  <span class="text-sm">üë§</span>
                              </div>
                              <div>
                                  <div class="text-sm font-medium text-gray-900">${user.nombre}</div>
                                  <div class="text-sm text-gray-500">${user.correo}</div>
                              </div>
                          </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getRoleBadgeClass(user.rol)}">
                              ${user.rol}
                          </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${user.departamento}</td>
                      <td class="px-6 py-4 whitespace-nowrap">
                          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${user.estado === 'activo' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                              ${user.estado}
                          </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${user.ultimo_acceso}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                          <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="editUser(${user.id})">Editar</button>
                          <button class="text-red-600 hover:text-red-900" onclick="deleteUser(${user.id})">Eliminar</button>
                      </td>
                  </tr>
              `).join('');
    }





    function loadReports() {
      // Agent Performance Chart
      const agentCtx = document.getElementById('agentPerformanceChart').getContext('2d');
      new Chart(agentCtx, {
        type: 'bar',
        data: {
          labels: ['Ana L√≥pez', 'Juan P√©rez', 'Sof√≠a Mart√≠nez', 'Carlos Ruiz'],
          datasets: [{
            label: 'Tickets Resueltos',
            data: [45, 38, 42, 35],
            backgroundColor: 'rgba(59, 130, 246, 0.8)'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false
        }
      });

      // Category Chart
      const categoryCtx = document.getElementById('categoryChart').getContext('2d');
      new Chart(categoryCtx, {
        type: 'doughnut',
        data: {
          labels: ['Hardware', 'Software', 'Red', 'Correo', 'Acceso'],
          datasets: [{
            data: [35, 28, 20, 12, 5],
            backgroundColor: [
              'rgba(239, 68, 68, 0.8)',
              'rgba(59, 130, 246, 0.8)',
              'rgba(16, 185, 129, 0.8)',
              'rgba(245, 158, 11, 0.8)',
              'rgba(139, 92, 246, 0.8)'
            ]
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false
        }
      });
    }

    function getRoleBadgeClass(rol) {
      const classes = {
        'Cliente': 'bg-blue-100 text-blue-800',
        'Agente': 'bg-green-100 text-green-800',
        'Supervisor': 'bg-yellow-100 text-yellow-800',
        'Administrador': 'bg-purple-100 text-purple-800'
      };
      return classes[rol] || 'bg-gray-100 text-gray-800';
    }

    function getStatusBadgeClass(estado) {
      const classes = {
        'abierto': 'bg-blue-100 text-blue-800',
        'en-progreso': 'bg-yellow-100 text-yellow-800',
        'pendiente': 'bg-purple-100 text-purple-800',
        'resuelto': 'bg-green-100 text-green-800'
      };
      return classes[estado] || 'bg-gray-100 text-gray-800';
    }

    function getPriorityBadgeClass(prioridad) {
      const classes = {
        'baja': 'bg-gray-100 text-gray-800',
        'media': 'bg-blue-100 text-blue-800',
        'alta': 'bg-orange-100 text-orange-800',
        'urgente': 'bg-red-100 text-red-800'
      };
      return classes[prioridad] || 'bg-gray-100 text-gray-800';
    }

    function getCategoryIcon(categoria) {
      const icons = {
        'Hardware': 'üñ•Ô∏è',
        'Software': 'üíæ',
        'Red': 'üåê',
        'Correo': 'üìß',
        'Acceso': 'üîê',
        'Tel√©fono': 'üìû',
        'Otro': '‚ùì'
      };
      return icons[categoria] || '‚ùì';
    }

    function showCreateUserModal() {
      showNotification('Modal de creaci√≥n de usuario en desarrollo', 'info');
    }

    function editUser(id) {
      showNotification(`Editando usuario ID: ${id}`, 'info');
    }

    function deleteUser(id) {
      if (confirm('¬øEst√°s seguro de que quieres eliminar este usuario?')) {
        showNotification(`Usuario ID: ${id} eliminado`, 'success');
      }
    }

    function showNotifications() {
      showNotification('Panel de notificaciones en desarrollo', 'info');
    }

    function logout() {
      if (confirm('¬øEst√°s seguro de que quieres cerrar sesi√≥n?')) {
        showNotification('Cerrando sesi√≥n...', 'info');
        setTimeout(() => {
          console.log('Redirect to login');
        }, 1500);
      }
    }

    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      const icons = { success: '‚úÖ', error: '‚ùå', info: '‚ÑπÔ∏è', warning: '‚ö†Ô∏è' };
      const colors = { success: 'bg-green-500', error: 'bg-red-500', info: 'bg-blue-500', warning: 'bg-yellow-500' };

      notification.className = `fixed top-4 right-4 flex items-center space-x-2 px-4 py-3 rounded-lg text-white shadow-lg z-50 fade-in ${colors[type]}`;
      notification.innerHTML = `<span>${icons[type]}</span><span class="text-sm font-medium">${message}</span>`;

      document.body.appendChild(notification);
      setTimeout(() => notification.remove(), 4000);
    }

    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function () {
      // Status Chart
      const statusCtx = document.getElementById('statusChart').getContext('2d');
      new Chart(statusCtx, {
        type: 'doughnut',
        data: {
          labels: ['Abiertos', 'En Progreso', 'Pendientes', 'Resueltos'],
          datasets: [{
            data: [45, 32, 18, 156],
            backgroundColor: [
              'rgba(59, 130, 246, 0.8)',
              'rgba(245, 158, 11, 0.8)',
              'rgba(139, 92, 246, 0.8)',
              'rgba(16, 185, 129, 0.8)'
            ]
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false
        }
      });




      // Trend Chart
      const trendCtx = document.getElementById('trendChart').getContext('2d');
      new Chart(trendCtx, {
        type: 'line',
        data: {
          labels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun'],
          datasets: [{
            label: 'Tickets Creados',
            data: [65, 78, 90, 81, 95, 102],
            borderColor: 'rgba(59, 130, 246, 1)',
            backgroundColor: 'rgba(59, 130, 246, 0.1)',
            tension: 0.4
          }, {
            label: 'Tickets Resueltos',
            data: [60, 75, 85, 85, 92, 98],
            borderColor: 'rgba(16, 185, 129, 1)',
            backgroundColor: 'rgba(16, 185, 129, 0.1)',
            tension: 0.4
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false
        }
      });
    });


    //Scripts por Confirmar
    function confirmLogout() {
      const confirmExit = confirm("¬øDeseas cerrar sesi√≥n?");
      if (confirmExit) {
        window.location.href = "/logout"; // o la ruta que uses en tu backend
      }
    }

    // ‚úÖ Ahora van fuera del logout, como funciones globales
    function showProfileModal() {
      document.getElementById('profileInputName').value = currentUser.name;
      document.getElementById('profileInputEmail').value = currentUser.email;
      document.getElementById('profileModal').classList.remove('hidden');
    }

    function closeProfileModal() {
      document.getElementById('profileModal').classList.add('hidden');
    }

    function updateProfile(event) {
      event.preventDefault();
      currentUser.name = document.getElementById('profileInputName').value;
      currentUser.email = document.getElementById('profileInputEmail').value;
      document.getElementById('profileName').textContent = currentUser.name;
      closeProfileModal();
      showNotification('Perfil actualizado.', 'success');
    }


    // --- Asegurar que currentUser exista ---
    if (typeof window.currentUser === 'undefined' || !window.currentUser) {
      window.currentUser = {
        name: document.getElementById('profileName')?.textContent?.trim() || 'Admin Sistema',
        email: 'admin@empresa.com'
      };
    }

    // --- Funciones robustas para el modal de perfil ---
    function showProfileModal() {
      try {
        // Si currentUser no est√° definido por alguna raz√≥n, lo definimos con un fallback
        if (typeof window.currentUser === 'undefined' || !window.currentUser) {
          window.currentUser = {
            name: document.getElementById('profileName')?.textContent?.trim() || 'Admin Sistema',
            email: 'admin@empresa.com'
          };
        }

        const nameInput = document.getElementById('profileInputName');
        const emailInput = document.getElementById('profileInputEmail');
        const modal = document.getElementById('profileModal');

        // Si faltan elementos del modal, mostramos un fallback informativo
        if (!modal || !nameInput || !emailInput) {
          console.warn('Elementos del modal no encontrados:', {
            modal: !!modal, nameInput: !!nameInput, emailInput: !!emailInput
          });
          // Fallback: alerta sencilla con la info del usuario
          alert(`Perfil:\nNombre: ${window.currentUser.name}\nEmail: ${window.currentUser.email}\n\n(Nota: falta el modal en el DOM)`);
          return;
        }

        // Rellenar inputs del modal y mostrarlo
        nameInput.value = window.currentUser.name || '';
        emailInput.value = window.currentUser.email || '';
        modal.classList.remove('hidden');
      } catch (err) {
        console.error('Error en showProfileModal:', err);
        alert('Error al abrir el perfil. Revisa la consola del navegador (F12).');
      }
    }

    function closeProfileModal() {
      const modal = document.getElementById('profileModal');
      if (modal) modal.classList.add('hidden');
    }

    function updateProfile(event) {
      event.preventDefault();
      try {
        const nameInput = document.getElementById('profileInputName');
        const emailInput = document.getElementById('profileInputEmail');
        if (nameInput) window.currentUser.name = nameInput.value;
        if (emailInput) window.currentUser.email = emailInput.value;

        const profileNameSpan = document.getElementById('profileName');
        if (profileNameSpan) profileNameSpan.textContent = window.currentUser.name;

        closeProfileModal();
        if (typeof showNotification === 'function') showNotification('Perfil actualizado.', 'success');
        else alert('Perfil actualizado.');
      } catch (err) {
        console.error('Error en updateProfile:', err);
        alert('No se pudo actualizar el perfil. Ver consola.');
      }
    }

    function showCreateUserModal() {
      document.getElementById('createUserModal').classList.remove('hidden');
    }

    function closeCreateUserModal() {
      document.getElementById('createUserModal').classList.add('hidden');
    }

    // Renderiza todos los usuarios en la tabla
    function renderUsers() {
      const tableBody = document.getElementById("usersTableBody");
      tableBody.innerHTML = '';

      sampleUsers.forEach(user => {
        const row = document.createElement('tr');
        row.className = 'hover:bg-gray-50';
        row.innerHTML = `
              <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                      <div class="flex-shrink-0 h-10 w-10">
                          <div class="h-10 w-10 rounded-full bg-purple-100 flex items-center justify-center text-purple-700 font-bold">
                              <span>üë§</span>
                          </div>
                      </div>
                      <div class="ml-4">
                          <div class="text-sm font-medium text-gray-900">${user.nombre}</div>
                          <div class="text-sm text-gray-500">${user.correo}</div>
                      </div>
                  </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getRoleColor(user.rol)}">
                      ${user.rol}
                  </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${user.departamento}</td>
              <td class="px-6 py-4 whitespace-nowrap">
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                      ${user.estado}
                  </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${user.ultimo_acceso}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-right space-x-4">
                  <button class="text-blue-600 hover:text-blue-900 font-medium" title="Editar">Editar</button>
                  <button class="text-red-600 hover:text-red-900 font-medium" title="Eliminar" onclick="deleteUser(${user.id})">Eliminar</button>
              </td>
          `;
        tableBody.appendChild(row);
      });
    }

    function saveCategoryTimes() {
      const categoryTimes = {
        hardware: document.getElementById('time-hardware').value,
        software: document.getElementById('time-software').value,
        network: document.getElementById('time-network').value,
        email: document.getElementById('time-email').value,
        phone: document.getElementById('time-phone').value,
        access: document.getElementById('time-access').value,
        other: document.getElementById('time-other').value
      };

      console.log("Tiempos de respuesta guardados:", categoryTimes);

      // Aqu√≠ puedes agregar tu llamada a backend, por ejemplo con fetch o axios
      // fetch('/api/saveCategoryTimes', { method: 'POST', body: JSON.stringify(categoryTimes), headers: { 'Content-Type': 'application/json' }})
      //     .then(res => res.json())
      //     .then(data => alert('Tiempos guardados correctamente'))
      //     .catch(err => alert('Error al guardar'));

      alert('Tiempos de respuesta guardados correctamente');
    }

    // Devuelve color seg√∫n rol
    function getRoleColor(role) {
      switch (role.toLowerCase()) {
        case 'cliente': return 'bg-blue-100 text-blue-800';
        case 'agente': return 'bg-green-100 text-green-800';
        case 'supervisor': return 'bg-yellow-100 text-yellow-800';
        case 'administrador': return 'bg-purple-100 text-purple-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    }

    // Funciones simuladas para respaldo y restauraci√≥n
    function backupSystem() {
      showNotification("Copia de seguridad creada correctamente.", "success");
    }

    function restoreSystem() {
      const fileInput = document.getElementById("restoreFile");
      if (!fileInput.files.length) {
        showNotification("Selecciona un archivo de respaldo primero.", "warning");
        return;
      }
      showNotification("Restaurando datos desde respaldo...", "info");
      setTimeout(() => {
        showNotification("Datos restaurados correctamente.", "success");
      }, 2000);
    }

    function getRoleBadgeClass(rol) {
      switch (rol.toLowerCase()) {
        case 'cliente': return 'bg-blue-100 text-blue-800';
        case 'agente': return 'bg-yellow-100 text-yellow-800';
        case 'supervisor': return 'bg-purple-100 text-purple-800';
        case 'admin': return 'bg-red-100 text-red-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    }

    function loadUsers(users = sampleUsers) {
      const tbody = document.getElementById('usersTableBody');
      tbody.innerHTML = users.map(user => `
          <tr class="hover:bg-gray-50">
              <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                      <div class="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center mr-3">
                          <span class="text-sm">üë§</span>
                      </div>
                      <div>
                          <div class="text-sm font-medium text-gray-900">${user.nombre}</div>
                          <div class="text-sm text-gray-500">${user.correo}</div>
                      </div>
                  </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getRoleBadgeClass(user.rol)}">
                      ${user.rol}
                  </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${user.departamento}</td>
              <td class="px-6 py-4 whitespace-nowrap">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${user.estado === 'activo' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                      ${user.estado}
                  </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${user.ultimo_acceso}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="editUser(${user.id})">Editar</button>
                  <button class="text-red-600 hover:text-red-900" onclick="deleteUser(${user.id})">Eliminar</button>
              </td>
          </tr>
      `).join('');
    }

    // Funci√≥n de b√∫squeda
    function filterUsers() {
      const searchText = document.getElementById('userSearch').value.toLowerCase();
      const selectedRole = document.getElementById('roleFilter').value.toLowerCase();

      const filtered = sampleUsers.filter(user => {
        const matchesSearch = user.nombre.toLowerCase().includes(searchText) || user.correo.toLowerCase().includes(searchText);
        const matchesRole = selectedRole === "" || user.rol.toLowerCase() === selectedRole;
        return matchesSearch && matchesRole;
      });

      loadUsers(filtered);
    }

    // Eventos
    document.getElementById('userSearch').addEventListener('input', filterUsers);
    document.getElementById('roleFilter').addEventListener('change', filterUsers);

    // Inicializar tabla
    loadUsers();

    // Placeholder para funciones de acci√≥n
    function editUser(id) { alert('Editar usuario ID: ' + id); }
    function deleteUser(id) { alert('Eliminar usuario ID: ' + id); }

    // Guardar tiempos definidos
    function saveResponseTimes() {
      const tiempos = {
        abierto: document.getElementById('timeOpen').value,
        enProgreso: document.getElementById('timeInProgress').value,
        pendiente: document.getElementById('timePending').value,
        resuelto: document.getElementById('timeResolved').value
      };

      localStorage.setItem('tiemposRespuesta', JSON.stringify(tiempos));
      showNotification('Tiempos de respuesta actualizados correctamente.', 'success');
    }

    // Cargar tiempos guardados al abrir configuraci√≥n
    document.addEventListener('DOMContentLoaded', () => {
      const guardados = JSON.parse(localStorage.getItem('tiemposRespuesta'));
      if (guardados) {
        document.getElementById('timeOpen').value = guardados.abierto || 4;
        document.getElementById('timeInProgress').value = guardados.enProgreso || 8;
        document.getElementById('timePending').value = guardados.pendiente || 12;
        document.getElementById('timeResolved').value = guardados.resuelto || 1;
      }
    });



    // Eventos
    document.getElementById('userSearch').addEventListener('input', filterUsers);
    document.getElementById('roleFilter').addEventListener('change', filterUsers);

    // Inicializar tabla
    loadUsers();

    // Placeholder para funciones de acci√≥n
    function editUser(id) { alert('Editar usuario ID: ' + id); }
    function deleteUser(id) { alert('Eliminar usuario ID: ' + id); }

    function getCategoryIcon(categoria) {
      switch (categoria.toLowerCase()) {
        case 'hardware': return 'üñ•Ô∏è';
        case 'software': return 'üíª';
        case 'red': return 'üåê';
        default: return '‚ùì';
      }
    }

    function getStatusBadgeClass(estado) {
      switch (estado.toLowerCase()) {
        case 'abierto': return 'bg-green-100 text-green-800';
        case 'en-progreso': return 'bg-yellow-100 text-yellow-800';
        case 'pendiente': return 'bg-red-100 text-red-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    }

    function getPriorityBadgeClass(prioridad) {
      switch (prioridad.toLowerCase()) {
        case 'alta': return 'bg-red-100 text-red-800';
        case 'media': return 'bg-yellow-100 text-yellow-800';
        case 'baja': return 'bg-green-100 text-green-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    }

    function loadTickets(tickets = sampleTickets) {
      const container = document.getElementById('ticketsList');
      container.innerHTML = tickets.map(ticket => `
          <div class="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50">
              <div class="flex items-center space-x-4">
                  <span class="text-xl">${getCategoryIcon(ticket.categoria)}</span>

                  <div>
                      <h4 class="font-medium text-gray-900">${ticket.titulo}</h4>
                      <p class="text-sm text-gray-600">${ticket.id} ‚Ä¢ ${ticket.usuario}</p>
                  </div>
              </div>
              <div class="flex items-center space-x-3">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadgeClass(ticket.estado)}">
                      ${ticket.estado}
                  </span>
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getPriorityBadgeClass(ticket.prioridad)}">
                      ${ticket.prioridad}
                  </span>
                  <span class="text-sm text-gray-500">${ticket.fecha}</span>
              </div>
          </div>
      `).join('');
    }

    // Funci√≥n para asignar emoji seg√∫n categor√≠a
    function getCategoryIcon(categoria) {
      const icons = {
        'Hardware': 'üñ•Ô∏è',
        'Software': 'üíæ',
        'Red': 'üåê',
        'Correo': 'üìß',
        'Acceso': 'üîê',
        'Tel√©fono': 'üìû',
        'Otro': '‚ùì'
      };
      return icons[categoria] || 'üé´'; // Emoji por defecto si no encuentra categor√≠a
    }


    // Funci√≥n de b√∫squeda y filtro
    function filterTickets() {
      const searchText = document.getElementById('ticketSearch').value.toLowerCase();
      const selectedStatus = document.getElementById('ticketStatusFilter').value.toLowerCase();
      const selectedCategory = document.getElementById('ticketCategoryFilter').value.toLowerCase();

      const filtered = sampleTickets.filter(ticket => {
        const matchesSearch = ticket.titulo.toLowerCase().includes(searchText) ||
          ticket.usuario.toLowerCase().includes(searchText) ||
          ticket.id.toLowerCase().includes(searchText);

        const matchesStatus = selectedStatus === "" || ticket.estado.toLowerCase() === selectedStatus;
        const matchesCategory = selectedCategory === "" || ticket.categoria.toLowerCase() === selectedCategory;

        return matchesSearch && matchesStatus && matchesCategory;
      });

      loadTickets(filtered);
    }

    // Eventos
    document.getElementById('ticketSearch').addEventListener('input', filterTickets);
    document.getElementById('ticketStatusFilter').addEventListener('change', filterTickets);
    document.getElementById('ticketCategoryFilter').addEventListener('change', filterTickets);

    // Inicializar tickets
    loadTickets();

    //BUSQUEDA DE TICKETS

    function getStatusBadgeClass(estado) {
      switch (estado.toLowerCase()) {
        case 'abierto': return 'bg-green-100 text-green-800';
        case 'en-progreso': return 'bg-yellow-100 text-yellow-800';
        case 'pendiente': return 'bg-red-100 text-red-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    }

    function getPriorityBadgeClass(prioridad) {
      switch (prioridad.toLowerCase()) {
        case 'alta': return 'bg-red-100 text-red-800';
        case 'media': return 'bg-yellow-100 text-yellow-800';
        case 'baja': return 'bg-green-100 text-green-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    }





    // Funci√≥n de b√∫squeda y filtro
    function filterTickets() {
      const searchText = document.getElementById('ticketSearch').value.toLowerCase();
      const selectedStatus = document.getElementById('ticketStatusFilter').value.toLowerCase();
      const selectedCategory = document.getElementById('ticketCategoryFilter').value.toLowerCase();

      const filtered = sampleTickets.filter(ticket => {
        const matchesSearch = ticket.titulo.toLowerCase().includes(searchText) ||
          ticket.usuario.toLowerCase().includes(searchText) ||
          ticket.id.toLowerCase().includes(searchText);

        const matchesStatus = selectedStatus === "" || ticket.estado.toLowerCase() === selectedStatus;
        const matchesCategory = selectedCategory === "" || ticket.categoria.toLowerCase() === selectedCategory;

        return matchesSearch && matchesStatus && matchesCategory;
      });

      loadTickets(filtered);
    }

    // Eventos
    document.getElementById('ticketSearch').addEventListener('input', filterTickets);
    document.getElementById('ticketStatusFilter').addEventListener('change', filterTickets);
    document.getElementById('ticketCategoryFilter').addEventListener('change', filterTickets);

    // Inicializar tickets
    loadTickets();


    // Funci√≥n para asignar un emoji seg√∫n el tipo de acci√≥n
    function getAuditIcon(accion) {
      const icons = {
        'Inicio de sesi√≥n': 'üîê',
        'Logout': 'üîì',
        'Ticket creado': 'üé´',
        'Ticket asignado': 'üìå',
        'Modificaciones': '‚úèÔ∏è'
      };
      return icons[accion] || 'üìù'; // Emoji por defecto si no est√° definido
    }

    // Cargar registros de auditor√≠a con emojis
    function loadAuditLog(logs = sampleAuditLog) {
      const container = document.getElementById('auditLog');
      container.innerHTML = logs.map(entry => `
          <div class="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50">
              <div class="flex items-center space-x-4">
                  <span class="text-lg">${getAuditIcon(entry.accion)}</span>
                  <div>
                      <h4 class="font-medium text-gray-900">${entry.accion}</h4>
                      <p class="text-sm text-gray-600">${entry.detalle}</p>
                      <p class="text-xs text-gray-500">Por: ${entry.usuario}</p>
                  </div>
              </div>
              <span class="text-sm text-gray-500">${entry.fecha}</span>
          </div>
      `).join('');
    }



    // Funci√≥n de b√∫squeda
    function filterAuditLog() {
      const searchText = document.getElementById('auditSearch').value.toLowerCase();

      const filtered = sampleAuditLog.filter(entry => {
        return entry.usuario.toLowerCase().includes(searchText) ||
          entry.accion.toLowerCase().includes(searchText) ||
          entry.detalle.toLowerCase().includes(searchText) ||
          entry.fecha.toLowerCase().includes(searchText);
      });

      loadAuditLog(filtered);
    }

    // Evento de b√∫squeda
    document.getElementById('auditSearch').addEventListener('input', filterAuditLog);

    // Inicializar auditor√≠a
    loadAuditLog();


    // Crear usuario nuevo desde modal
    function createUser(event) {
      event.preventDefault();

      const name = document.getElementById('userName').value.trim();
      const email = document.getElementById('userEmail').value.trim();
      const role = document.getElementById('userRole').value;
      const dept = document.getElementById('userDept').value; // üîπ Departamento seleccionado

      // üîπ Fecha + hora actual formateada
      // üîπ Generar fecha y hora con formato: YYYY-MM-DD HH:mm
      const now = new Date();
      const year = now.getFullYear();
      const month = String(now.getMonth() + 1).padStart(2, '0');
      const day = String(now.getDate()).padStart(2, '0');
      const hours = String(now.getHours()).padStart(2, '0');
      const minutes = String(now.getMinutes()).padStart(2, '0');
      const fechaHora = `${year}-${month}-${day} ${hours}:${minutes}`;


      if (!name || !email) {
        alert("Por favor completa todos los campos.");
        return;
      }

      const newUser = {
        id: sampleUsers.length + 1,
        nombre: name,
        correo: email,
        rol: role,
        departamento: dept,
        estado: 'activo',
        ultimo_acceso: fechaHora // üîπ Incluye hora
      };

      // Agregar usuario al arreglo
      sampleUsers.push(newUser);

      // Volver a renderizar la tabla
      renderUsers();

      // Cerrar modal y limpiar campos
      closeCreateUserModal();
      document.getElementById('userName').value = '';
      document.getElementById('userEmail').value = '';
      document.getElementById('userRole').value = 'Cliente';
      document.getElementById('userDept').value = 'Soporte';

      // Actualizar estad√≠sticas
      updateUserStats(role, +1);

      showNotification(`Usuario "${name}" agregado correctamente.`, 'success');
    }

    renderUsers();






  </script>
  <script>(function () { function c() { var b = a.contentDocument || a.contentWindow.document; if (b) { var d = b.createElement('script'); d.innerHTML = "window.__CF$cv$params={r:'9891fead2396f776',t:'MTc1OTU1Mjc2MC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);"; b.getElementsByTagName('head')[0].appendChild(d) } } if (document.body) { var a = document.createElement('iframe'); a.height = 1; a.width = 1; a.style.position = 'absolute'; a.style.top = 0; a.style.left = 0; a.style.border = 'none'; a.style.visibility = 'hidden'; document.body.appendChild(a); if ('loading' !== document.readyState) c(); else if (window.addEventListener) document.addEventListener('DOMContentLoaded', c); else { var e = document.onreadystatechange || function () { }; document.onreadystatechange = function (b) { e(b); 'loading' !== document.readyState && (document.onreadystatechange = e, c()) } } } })();</script>
